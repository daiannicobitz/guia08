package frsf.isi.died.guia08.problema01.modelo;

import java.time.LocalDate;
import java.util.List;
import java.util.function.Function;
import java.util.function.Predicate;

import frsf.isi.died.guia08.problema01.excepciones.ExcepcionTareaYaTieneEmpleadoAsignado;

public class Empleado {

	public enum Tipo { CONTRATADO,EFECTIVO}; 
	
	private Integer cuil;
	private String nombre;
	private Tipo tipo;
	private Double costoHora;
	private List<Tarea> tareasAsignadas;
	
	private Function<Tarea, Double> calculoPagoPorTarea;		
	private Predicate<Tarea> puedeAsignarTarea;

	
	public Double salario() {
		// cargar todas las tareas no facturadas
		// calcular el costo
		// marcarlas como facturadas.
		return 0.0;
	}
	
	/**
	 * Si la tarea ya fue terminada nos indica cuaal es el monto según el algoritmo de calculoPagoPorTarea
	 * Si la tarea no fue terminada simplemente calcula el costo en base a lo estimado.
	 * @param t
	 * @return
	 */
	public Double costoTarea(Tarea t) {
		return 0.0;
	}
		
	public Boolean asignarTarea(Tarea t) throws ExcepcionTareaYaTieneEmpleadoAsignado{
		boolean ret=false;
		if(t.getEmpleadoAsignado()==null) {
		if(this.tipo.compareTo(Tipo.CONTRATADO)==0) {
			if(this.tareasAsignadas.size()<5) {
				this.tareasAsignadas.add(t);
				ret=true;
			}
		}else {
			Integer sumaHoras=0;
			for(int i=0; i<this.tareasAsignadas.size();i++) 
				sumaHoras=sumaHoras+tareasAsignadas.get(i).getDuracionEstimada();
			if((sumaHoras+t.getDuracionEstimada())<16) {
				this.tareasAsignadas.add(t);
				ret=true;
			}
		}
		}else {
			throw new ExcepcionTareaYaTieneEmpleadoAsignado("Esta tarea ya tiene un empleado asignado. Seleccione otra.");
		}
		return ret;
	}
	
	public void comenzar(Integer idTarea) {
		// busca la tarea en la lista de tareas asignadas 
		// si la tarea no existe lanza una excepción
		// si la tarea existe indica como fecha de inicio la fecha y hora actual
	}
	
	public void finalizar(Integer idTarea) {
		// busca la tarea en la lista de tareas asignadas 
		// si la tarea no existe lanza una excepción
		// si la tarea existe indica como fecha de finalizacion la fecha y hora actual
	}

	public void comenzar(Integer idTarea,String fecha) {
		// busca la tarea en la lista de tareas asignadas 
		// si la tarea no existe lanza una excepción
		// si la tarea existe indica como fecha de finalizacion la fecha y hora actual
	}
	
	public void finalizar(Integer idTarea,String fecha) {
		// busca la tarea en la lista de tareas asignadas 
		// si la tarea no existe lanza una excepción
		// si la tarea existe indica como fecha de finalizacion la fecha y hora actual
	}

	public Tipo getTipo() {
		return tipo;
	}

	public List<Tarea> getTareasAsignadas() {
		return tareasAsignadas;
	}
	
	public void agregarTarea(Tarea t) {
		this.tareasAsignadas.add(t);
	}
}
